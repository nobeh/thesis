% -*- root: paper-podc.tex -*-

% Section: Related Work

\section{Related Work}
\label{sec:relatedwork}

We use the established formalism of timed automata~\cite{alur:1994:timedautomata} to model service characteristics.
This allows us to leverage a wealth of mature model checking and schedulability analysis techniques.
To the best of our knowledge, the only other paper that uses timed automata is~\cite{raimondi2008fsmsla}.
In contrast to our work, they do not consider optimizing the service characteristics based on the timed automata.
Instead, only (un)successful completion of requests is considered.
Moreover, we build on top of a much more expressive modelling language Real-Time ABS~\cite{johnsen2012abs,bjork2013:rtabs} that has a mapping to timed automata~\cite{jaghoori2010time}.

Hogben and Pannetrat examine in \cite{hogben2013defavail} the challenges of defining and measuring availability to support real-world service comparison and dispute resolution through SLAs.
They show how two examples of real-world SLAs would lead one service provider to report 0\% availability while another report 100\% for the same system state history but using a different period of time.
Our work experimentally confirms that the choice of monitoring window is crucial for reliable results and effective evolution of the service.
% Additionally, the authors take a continuous time approach contrasted with ours that uses discrete time advancements.
% Similarly, they model the property of availability using a two-state model.

MONINA~\cite{inzinger:monitoring,inzinger2013specification} is a DSL with a prototype of a generic monitoring architecture that uses a rule engine.
The architecture uses an event-driven approach and uses message passing mechanisms.
% We do not impose a new language; however, 
% We propose a generic model to be able to characterize arbitrary service properties.
% The model in the paper allows for a language-agnostic implementation. 
% However, MONINA provides an architecture implementation based on Rule Engine technologies and its domain-specific language design.


%There are related work in the domain of service level agreements (SLA).
Various papers~\cite{keller2003wsla,kearney2010sla,mahbub2011translationsla,comuzzi2009defavail,chen2007sladecompose} 
provide a language or a framework that allows to formalize service level agreements (SLA).
However, they do not study how such SLAs can be used to monitor the service and evolve it as necessary.
% WSLA~\cite{keller2003wsla} introduces a framework to define and break down customer agreements into a technical description of SLAs.
% In ~\cite{mahbub2011translationsla}, a method is proposed to translate the specification of SLA into a technical domain directed in SLA@SOI EU project.
% In the same project, \cite{comuzzi2009defavail} defines terms such as availability, accessibility and throughput as notions of SLA, however, the formal semantics and properties of the notions are not investigated.
% In \cite{chen2007sladecompose}, authors describe how they introduce a function how to decompose SLA terms into measurable factors and how to profile them.

% Johnsen~\cite{johnsen2012modeling} introduce ``deployment components'' using Real-Time ABS~\cite{bjork2013:rtabs}.
% A deployment component enables an application to acquire and release resources on-demand based on a QoS specification of the application.
% A deployment component is a high level abstraction of a resource that promotes an application to a resource-aware level of programming.
% Our work is distinguished by the fact that we separate the monitors from the application (service) themselves.
% We argue that we aim to design the monitoring model to be as \emph{non-intrusive} as possible to the service runtime. 
% Thus, we do not deploy the monitors inside the service runtime.

In Quanticol EU project\footnote{Quanticol EU project with no. 600708: \url{http://quanticol.eu/}}, the authors of \cite{coles2011cost} and \cite{gilmore2011non} use statistical approaches to observe and guarantee service level agreements for public transportation.
We also present composable service characteristics. 
This means that evolving a system based on SLAs turns into a multi-objective optimization problem.
In addition, in COMPASS EU project\footnote{COMPASS EU project with no. 287829: \url{http://www.compass-research.eu/}}, CML~\cite{woodcock2014contracts} is a formal language to model systems of systems and the contracts between them.
CML studies certain properties of the model and their applications.
CML is used in the context of robotics technology to model and ensure how emergency sensors should react and behave according to the SLAs defined for them.
% Our approach is similar to provide a generic model for service characteristics definition, however, we utilize timed and task automata.

